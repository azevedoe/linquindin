<div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">

  <div class="mt-6 sm:mx-auto sm:w-full sm:max-w-sm">
    {{#if error}}
    <div class="mb-4 text-sm text-red-600">
      {{error}}
    </div>
    {{/if}}
    <form class="space-y-6" action="/users/create" method="POST" enctype="multipart/form-data">
      <div>
        <label for="photo-upload" class="block text-sm font-medium text-gray-900">Foto do usuário</label>
        <div class="mt-2 flex items-center">
          <div id="photo-container"
            class="flex items-center justify-center w-20 h-20 rounded-full bg-gray-100 cursor-pointer overflow-hidden">
            <input id="photo-upload" name="photo" type="file" accept="image/*" class="hidden"
              onchange="previewImage(event)" />
            <label for="photo-upload" class="cursor-pointer">
              <svg class="h-6 w-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.5v15m7.5-7.5h-15" />
              </svg>
            </label>
          </div>
        </div>
      </div>
      <div>
        <label for="name" class="block text-sm font-medium text-gray-900">Nome
          Completo</label>
        <div class="mt-2">
          <input type="name" name="name" id="name" autocomplete="name" required
            class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm" />
        </div>
      </div>
      <div>
        <label for="email" class="block text-sm font-medium text-gray-900">E-mail</label>
        <div class="mt-2">
          <input type="email" name="email" id="email" autocomplete="email" required
            class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm" />
        </div>
      </div>
      <div>

        <label for="password" class="block text-sm font-medium text-gray-900">Senha</label>

        <div class="mt-2">
          <input type="password" name="password" id="password" autocomplete="current-password" required
            class="block w-full rounded-md bg-white px-3 py-1.5 text-base text-gray-900 outline outline-1 -outline-offset-1 outline-gray-300 placeholder:text-gray-400 focus:outline focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600 sm:text-sm" />
        </div>
      </div>

      <div>
        <input type="checkbox" id="isAdmin" name="isAdmin" />
        <label for="isAdmin">Administrador</label>
      </div>

      <div class="col-span-full">
        <label for="chips-input" class="block text-sm font-medium text-gray-900">Skills</label>
        <div id="chip-container"
          class="flex flex-wrap items-center gap-2 mt-2 p-2 bg-white border rounded-lg focus-within:ring-2 focus-within:ring-indigo-500 focus-within:border-indigo-500">
          <input id="chips-input" type="text"
            class="flex-1 border-none focus:outline-none text-sm text-gray-700 placeholder-gray-400"
            placeholder="Digite e pressione Enter" />
        </div>
      </div>
      <div>
        <button type="submit"
          class="flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
          Criar usuário
        </button>
      </div>
      <input type="hidden" name="skills" id="hidden-skills">
    </form>
  </div>
</div>


<script>
  const chipContainer = document.getElementById('chip-container');
  const chipsInput = document.getElementById('chips-input');
  const skillsField = document.getElementById('hidden-skills');

  function createChip(text) {
    const chip = document.createElement('div');
    chip.className = 'flex items-center bg-indigo-100 text-indigo-800 text-sm font-medium px-2 py-1 rounded-full';
    chip.innerHTML = `
                        <span>${text}</span>
                        <button 
                        class="ml-1 text-indigo-500 hover:text-indigo-800 focus:outline-none"
                        aria-label="Remover chip">&times;</button>
                    `;

    chip.querySelector('button').addEventListener('click', () => {
      chipContainer.removeChild(chip);
      updateSkillsField();
    });

    return chip;
  }

  function chipExists(text) {
    return Array.from(chipContainer.querySelectorAll('span'))
      .some(span => span.textContent.trim().toLowerCase() === text.toLowerCase());
  }

  function updateSkillsField() {
    const skills = Array.from(chipContainer.querySelectorAll('span'))
      .map(span => span.textContent.trim());
    skillsField.value = JSON.stringify(skills);
  }

  chipsInput.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' && chipsInput.value.trim() !== '') {
      event.preventDefault();

      const newSkill = chipsInput.value.trim();

      if (chipExists(newSkill)) {
        chipsInput.value = '';
        return;
      }

      const chip = createChip(newSkill);
      chipContainer.insertBefore(chip, chipsInput);

      updateSkillsField();

      chipsInput.value = '';
    }
  });


  function previewImage(event) {
    const file = event.target.files[0];
    const container = document.getElementById('photo-container');
    const input = document.getElementById('photo-upload');

    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        container.innerHTML = `<label for="photo-upload" class="cursor-pointer">
                    <img src="${e.target.result}" alt="Preview" class="w-15 h-15 rounded-full object-cover" />
                </label>`;
        container.appendChild(input); // Re-adiciona o input ao container.
      };
      reader.readAsDataURL(file);
    }
  }
</script>